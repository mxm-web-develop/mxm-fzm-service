import s from"axios";import{setStore as e}from"mxm-usrstorage";class t{_axios;_url;_config;constructor(e,t){t&&t.url?(this._url=t.url,this._axios=s.create({baseURL:t.url,...t})):(this._url=e,this._axios=s.create({baseURL:e,...t})),this._config=t,this._axios.interceptors.response.use((s=>(s=>{if(200===s.status&&"OK"===s.statusText)return s.data;throw new Error(s.statusText)})(s)),(s=>Promise.reject(s)))}}var i={login:"/api/user/login",isSetPwd:"/api/user/isSetPwd",keyAdd:"/api/appKey/add",keyDelete:"/api/appKey/delete",keyList:"/api/appKey/list",register:"/api/user/register",send:"/api/user/send",sendEmail:"/api/user/sendEmail",sendSms:"/api/user/sendSms",setPhone:"/api/user/setPhone",setPhoneCode:"/api/user/setPhoneCode",setPwd:"/api/user/setPwd",setPwdCode:"/api/user/setPwdCode",user:"api/user",add:"/api/users/add"};class r extends t{constructor(s,e){super(s,e)}async login(s){const t=await this._axios.post(i.login,s);return t&&e({app:this.constructor.name}),t}async isSetPwd(s){return await this._axios.post(i.isSetPwd,s)}async keyAdd(s){return await this._axios.post(i.keyAdd,s)}async keyDelete(s){return await this._axios.delete(i.keyDelete,{params:s})}async keyList(s){return await this._axios.post(i.keyList,s)}}class a extends t{static _version;constructor(s,e){super(s,e),a._version="v.1.0.1"}userModule=()=>new r(this._url,this._config)}class o{constructor(s,e){}kill(){console.log(222)}}class n{_url;_config;constructor(s,e){this._url=s,this._config=e}SuyuanModlue=()=>new a(this._url,this._config)}export{o as browserApi,t as commonApi,n as default,a as suyuanApi};
